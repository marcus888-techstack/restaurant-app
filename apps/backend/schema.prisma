// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
  enable_experimental_decimal = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  phone     String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders       Order[]
  reservations Reservation[]
  reviews      Review[]
  addresses    Address[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  sortOrder   Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menuItems MenuItem[]

  @@map("categories")
}

model MenuItem {
  id            String   @id @default(cuid())
  categoryId    String
  name          String
  description   String?
  price         Decimal  @db.Decimal(10, 2)
  available     Boolean  @default(true)
  imageUrl      String?
  nutritionInfo Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category Category              @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  variants   MenuItemVariant[]
  reviews    Review[]

  @@map("menu_items")
}

model MenuItemVariant {
  id          String   @id @default(cuid())
  menuItemId  String
  name        String
  priceAdjustment Decimal @db.Decimal(10, 2) @default(0)
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("menu_item_variants")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  orderNumber String      @unique
  subtotal    Decimal     @db.Decimal(10, 2)
  tax         Decimal     @db.Decimal(10, 2)
  total       Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  type        OrderType   @default(DELIVERY)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  notes      String?

  order    Order    @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  label      String?  // Home, Work, etc.
  street     String
  city       String
  state      String
  zipCode    String
  country    String   @default("US")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Reservation {
  id               String            @id @default(cuid())
  userId           String
  tableId          String?
  reservationTime  DateTime
  partySize        Int
  status           ReservationStatus @default(PENDING)
  specialNotes     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  table Table? @relation(fields: [tableId], references: [id])

  @@map("reservations")
}

model Table {
  id         String      @id @default(cuid())
  number     String      @unique
  capacity   Int
  status     TableStatus @default(AVAILABLE)
  location   String?     // Indoor, Outdoor, Patio, etc.
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  reservations Reservation[]

  @@map("tables")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  menuItemId String
  rating     Int      // 1-5 stars
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("reviews")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum OrderType {
  DELIVERY
  PICKUP
  DINE_IN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  SEATED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  DIGITAL_WALLET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}